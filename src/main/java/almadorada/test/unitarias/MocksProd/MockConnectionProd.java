package main.java.almadorada.test.unitarias.MocksProd;

import main.java.almadorada.test.unitarias.AdaptersProd.ConnectionAdapterProd;

import java.sql.*;

public class MockConnectionProd extends ConnectionAdapterProd {

    private MockPreparedStatementProd ps = new MockPreparedStatementProd();

    @Override
    public PreparedStatement prepareStatement(String sql) {
        ps.setSql(sql);
        return ps;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        ps.setSql(sql);
        ps.setReturnGeneratedKeys(autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS);
        return ps;
    }

    // Método para permitir cambiar el PreparedStatement mockeado que se devolverá
    public void setPreparedStatement(MockPreparedStatementProd mockPreparedStatement) {
        this.ps = mockPreparedStatement;
    }

    // Otros métodos vacíos o default (se pueden omitir o lanzar UnsupportedOperationException)
    @Override public void close() {}
    @Override public boolean isClosed() { return false; }
    @Override public boolean isValid(int timeout) { return true; }
    @Override public Statement createStatement() { throw new UnsupportedOperationException(); }
    @Override public <T> T unwrap(Class<T> iface) { throw new UnsupportedOperationException(); }
    @Override public boolean isWrapperFor(Class<?> iface) { return false; }
}
